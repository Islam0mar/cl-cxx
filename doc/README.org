* Introduction

  This library provides an interface to C++ from Common Lisp.

  As [[https://cffi.common-lisp.dev/][CFFI]] is normally used for C code, there are no builtin functions
  to deal with C++ extensions from Common Lisp like class definitions,
  their instantiation, accessing and defining member functions,
  etc. [[https://github.com/Islam0mar/cl-cxx][cl-cxx]] is an attempt to step in and facilitate easy interfacing
  from Common Lisp to C​++ libs. It uses CFFI under the hood, but
  generates its definitions automagically from C​++ code provided by
  the user.

  The code was inspired by Julia's [[https://github.com/JuliaInterop/CxxWrap.jl][CxxWrap]] and provides a similar
  functionality as python's [[https://github.com/pybind/pybind11][pybind11]] for the Common Lisp community.
  
* Architecture

** Provided parts

  The provided architecture consists of two parts:

  - [[https://github.com/Islam0mar/CLCXX][CLCXX]]

     A C​++ library which gets compiled once and installed systemwide,
     visible by the C++ compiler.

  - [[https://github.com/Islam0mar/cl-cxx][cl-cxx]]

    The Common Lisp part, which translates the definitions of the
    custom C​++ library (see below) to CFFI code suitable to be used
    directly from Common Lisp.

  In addition additional existing C++ Libraries and their header files
  can be included in case they are targeted.
  
** Custom parts

   There are also two user-defined parts:

  - A custom C​++ library

    This contains the C​++ code to be exposed to Lisp, custom
    definitions or glue code to existing libraries, the API bindings,
    package name definitions for the Lisp side, the Lisp names of
    functions, methods, member functions, etc...
  
  - The custom Common Lisp code

    This contains the code to load the foreign libraries and
    initialize the cl-cxx system and package definitions from the C++
    lib to be accessible by Lisp. In addition this code can also
    contain macros and such to make the API "lispier", as it is common
    for CFFI related packages.

  The following diagram shows the relation of the different parts:
  [[./block-diagram.svg]]

  
  Note that with this design, the definition of functions, structs,
  etc. is *not* done on the Lisp side, as it's normally done when
  directly working with standard CFFI, but rather on the C​++ side,
  with the translations, name mangling, etc. done automatically by
  CLCXX and cl-cxx. The two functions taking care of translating the
  compiled C​++ definitions into cffi are =(cxx:init)= and
  =(cxx:add-package...)=

* Examples

  The =example= folder contains a full example. The necessary steps to
  make the example work are explained using linux commands. Please
  translate them into the corresponding commands for your OS.

  - Copy the folder with all contents to a location of your choice:

#+BEGIN_SRC bash

$ cp -R examples /tmp/
$ cd /tmp/examples

#+END_SRC bash

The necessary files for the custom C++ library are in the subfolder
=custom-lib=. If additional libs are needed, put their header files
into the =custom-lib/include= and add their reference to the file
CMakeLists.txt as in a normal C++ project. See the commented parts of
CMakeLists.txt for an example.

The C​++ source file is located in =custom-lib/src/my-lib.cpp= Here are
it's contents:

#+BEGIN_SRC c

include <clcxx.h>

#+END_SRC bash


Build the custom C++ library

  Following is a full example
Examples - 2 or 3 end to end examples, with extensive documentation

* Future Direction

  none yet...
  
* Help Wanted

  please send bug reports, code to custom libs using the system,
  etc. for expanding the user base.
