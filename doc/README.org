* Introduction

  This library provides an interface to C++ from Common Lisp. It was
  inspired by Julia's [[https://github.com/JuliaInterop/CxxWrap.jl][CxxWrap]] and provides a similar functionality as
  python's [[https://github.com/pybind/pybind11][pybind11]] for Common Lisp.
  
  As [[https://cffi.common-lisp.dev/][CFFI]] is normally used for C code, there are no builtin functions
  to deal with C++ extensions from Common Lisp like class definitions,
  their instantiation, accessing and defining member functions,
  etc. [[https://github.com/Islam0mar/cl-cxx][cl-cxx]] is an attempt to step in and facilitate easy interfacing
  from Common Lisp to C++ libs.

* Architecture

** Provided parts

  The provided architecture consists of two parts:

  - [[https://github.com/Islam0mar/CLCXX][CLCXX]]

     A C​++ library which gets compiled once and installed systemwide,
     visible by the C++ compiler.

  - [[https://github.com/Islam0mar/cl-cxx][cl-cxx]]

    The Common Lisp part, which translates the definitions of the
    custom C​++ library (see below) to CFFI code suitable to be used
    directly from Common Lisp.

  In addition the targeted C++ Library (if any) and its header files
  will also be needed.
  
** Custom parts

   There are also two user-defined parts:

  - A custom C​++ library

    This contains the C​++ code to be exposed to Lisp, the API
    bindings, package name definitions for the Lisp side, the Lisp
    names of functions, methods, member functions, etc...

  - The custom Common Lisp code

    This contains the code to load the foreign libraries and
    initialize the cl-cxx system and package definitions from the C++
    lib to be accessible by Lisp.

  The following diagram shows the relation of the different parts:
  [[./block-diagram.svg]]

  
  Note that with this design, the definition of functions, structs,
  etc. is *not* done on the Lisp side, as it's normally done when
  directly working with standard CFFI, but rather on the C​++ side,
  with the translations, name mangling, etc. done automatically by
  CLCXX and cl-cxx.

* Examples
  
Examples - 2 or 3 end to end examples, with extensive documentation

* Future Direction

  none yet...
  
* Help Wanted

  please send bug reports, code to custom libs using the system,
  etc. for expanding the user base.
